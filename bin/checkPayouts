#!/usr/bin/env node
var url = require('url');
var path= require('path'),
    async = require('async'),
    ObjectId = require('mongodb').ObjectID;
var Logger = require('le_node');

process.chdir(path.resolve(__dirname,'../'));
var subsValue;
(function() {
  var sails;
  try {
    sails = require('sails');
  } catch (e) {
    console.error('To run an app using `node app.js`, you usually need to have a version of `sails` installed in the same directory as your app.');
    console.error('To do that, run `npm install sails`');
    console.error('');
    console.error('Alternatively, if you have sails installed globally (i.e. you did `npm install -g sails`), you can use `sails lift`.');
    console.error('When you run `sails lift`, your app will still use a local `./node_modules/sails` dependency if it exists,');
    console.error('but if it doesn\'t, the app will run with the global sails instead!');
    return;
  }

  // Try to get `rc` dependency
  var rc;
  try {
    rc = require('rc');
  } catch (e0) {
    try {
      rc = require('sails/node_modules/rc');
    } catch (e1) {
      console.error('Could not find dependency: `rc`.');
      console.error('Your `.sailsrc` file(s) will be ignored.');
      console.error('To resolve this, run:');
      console.error('npm install rc --save');
      rc = function () { return {}; };
    }
  }
  // Start server
  sails.lift(rc('sails'),function(done){
    var logger = new Logger({
      token:sails.config.keys.scheduledLogEntriesKey
    });

    //Find all the payouts that are marked as not payed yet
    Payout.find({payed:false},(err,payouts)=>{
      if(err){
        logger.err('Error finding payouts on checkPayouts',err);
        return sails.lower(()=>{
          process.exit();
        });
      }
      //check each payout to see if they're already paid and discount the amount and fee from the user balance
      async.eachOfLimit(payouts,20,(pay,index,cb)=>{
        bitcoins.bitsendStatus(pay.txId,(err,response)=>{
          if(err){
            logger.err(`Error finding payout status. Id: ${pay.id}`,err);
            return cb(err);
          }
          if(response.status==='completed'){
            Payout.update(pay.id,{payed:true},(err,updatedPay)=>{
              if(err){
                logger.err(`Error updating payment status to completed. Id: ${pay.id}`,err);
                return cb(err);
              }
              User.findOne(pay.user,(err,user)=>{
                if(err){
                  logger.err(`Error updating user balance after payout. Payout Id: ${pay.id}`,err);
                  return cb(err);
                }
                //compute the new user's balance
                var payoutTotal= pay.amount+pay.fee;
                var newBalance = user.balance.reduce((res,val)=>{
                  return res + val;
                },-payoutTotal);
                User.update(pay.user,{balance:[newBalance],totalBalance:newBalance},(err,updatedUser)=>{
                  if(err){
                    logger.err(`Error updating user balance after payout. Payout Id: ${pay.id}`,err);
                    return cb(err);
                  }
                  cb();
                });
              });
            });
          }else{
            return cb();
          }
        });
      },(err)=>{
        if(err){
          return logger.err(`checkPayouts failed to execute on ${new Date()}`);
        }
        //close execution and sails.
        return sails.lower(()=>{
          process.exit();
        });

      });

    });
  });
})();
