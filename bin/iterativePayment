#!/usr/bin/env node
var url = require('url');
var path= require('path'),
    async = require('async'),
    ObjectId = require('mongodb').ObjectID;
var Logger = require('le_node');

process.chdir(path.resolve(__dirname,'../'));
var subsValue;
(function() {
  var sails;
  try {
    sails = require('sails');
  } catch (e) {
    console.error('To run an app using `node app.js`, you usually need to have a version of `sails` installed in the same directory as your app.');
    console.error('To do that, run `npm install sails`');
    console.error('');
    console.error('Alternatively, if you have sails installed globally (i.e. you did `npm install -g sails`), you can use `sails lift`.');
    console.error('When you run `sails lift`, your app will still use a local `./node_modules/sails` dependency if it exists,');
    console.error('but if it doesn\'t, the app will run with the global sails instead!');
    return;
  }

  // Try to get `rc` dependency
  var rc;
  try {
    rc = require('rc');
  } catch (e0) {
    try {
      rc = require('sails/node_modules/rc');
    } catch (e1) {
      console.error('Could not find dependency: `rc`.');
      console.error('Your `.sailsrc` file(s) will be ignored.');
      console.error('To resolve this, run:');
      console.error('npm install rc --save');
      rc = function () { return {}; };
    }
  }
  // Start server
  sails.lift(rc('sails'),function(err){
    //start logger to log error events when this happens
    var logger = new Logger({
      token:sails.config.keys.scheduledLogEntriesKey
    });
    var firstlvl = [],
        secondlvl = [],
        thirdlvl = [],
        fourthlvl = [];
  
    //Get the native colletions

    /**
    *
    *Runs through an array of payments and distributes it's value through all the involved users
    *
    *@param {Payments[]} payments - The set of payments to be iterated
    *@param {Object} uc - The Native Mongodb Collection for users
    *@param {Object} pc - The Native Mongodb Collection for payments
    *@param {function} callback - The function to be executed once the
    *
    */
    var distributePayments=(payments,uc,pc,callback)=>{
      //if there is no payments to be distributed then just finish the job
      if(payments.length===0){
        return callback();
      }
      var result={
        first:[],//this will contain the user's ids that must be credited 0.5 of distValue
        second:[],//this will contain the user's ids that must be credited 0.2 of distValue
        third:[],//this will contain the user's ids that must be credited 0.1 of distValue
        fourth:[] //this will contain the user's ids that must be credited the final 0.1 of distValue
      };
      async.eachOfLimit(payments,20,(payment,index,cb)=>{
        //this function gets executed for each payment
        //first, mark the payment as distributed
        pc.update({_id:payment._id},{$set:{distributed:true}},{w:1},(err,updatedPayment)=>{
          if(err)return cb(new Error(`Error updating payment on ${payment._id} payment`));
          //then, fetch the owner of the payment, we will call this user "son"
          uc.findOne({_id:payment.user},{fields:{recommender:1}},(err,son)=>{
            if(err)return cb(new Error(`Error retrivering son on ${payment._id} payment`));
            //if he has a recommender, then follow on
            if(son.recommender){
              //find son's father
              uc.findOne({_id:new ObjectId(son.recommender)},{fields:{recommender:1}},(err,father)=>{
                if(err)return cb(new Error(`Error retrivering father on ${payment._id} payment`));
                //Make sure father actually exists. This may be the case when the recommender in son is somehow wrong
                if(!father)return cb();
                //push father to the first array if son's recommender exists.
                result.first.push({recommender: son.recommender, amount: payment.amount});
                //from this on just repeat the process above
                if(father.recommender){
                  uc.findOne({_id:new ObjectId(father.recommender)},{fields:{recommender:1}},(err,grandpa)=>{
                    if(err)return cb(new Error(`Error retrivering grandpa on ${payment._id} payment`));
                    if(!grandpa)return cb();
                    result.second.push({recommender: father.recommender, amount: payment.amount});
                    if(grandpa.recommender){
                      uc.findOne({_id:new ObjectId(grandpa.recommender)},{fields:{recommender:1}},(err,grandgrandpa)=>{
                        if(err)return cb(new Error(`Error retrivering grandgrandpa on ${payment._id} payment`));
                        if(!grandgrandpa)return cb();
                        result.third.push({recommender: grandpa.recommender, amount: payment.amount});
                        if(grandgrandpa.recommender){
                          uc.findOne({_id:new ObjectId(grandgrandpa.recommender)},{fields:{recommender:1}},(err,oldest)=>{
                            if(err)return cb(new Error(`Error retrivering oldest on ${payment._id} payment`));
                            if(!oldest)return cb();
                            result.fourth.push({recommender: grandgrandpa.recommender, amount: payment.amount});
                            //We are done for this payment
                            return cb();
                          });
                        }else{
                          return cb();
                        }
                      });
                    }else{
                      return cb();
                    }
                  });
                }else{
                  return cb();
                }
              });
            }else{
              return cb();
            }
          });
        });
      },(err)=>{
        //this function gets executed once all the payments have been analized
        //Log any error so it can be hand fixed
        if(err)logger.err('Error on iterative payment',err);
        //Transform and reduce the result arrays so they become an Object with users id as keys and total to be atributted as values
        var reduced = {};
        result.first.forEach((item,key)=>{
          if(reduced[item.recommender]){
            reduced[item.recommender]+=(item.amount*0.7)*0.26;
          }else{
            reduced[item.recommender]=(item.amount*0.7)*0.26;
          }
        });
        result.second.forEach((item,key)=>{
          if(reduced[item.recommender]){
            reduced[item.recommender]+=(item.amount*0.7)*0.18;
          }else{
            reduced[item.recommender]=(item.amount*0.7)*0.18;
          }
        });
        result.third.forEach((item,key)=>{
          if(reduced[item.recommender]){
            reduced[item.recommender]+=(item.amount*0.7)*0.1;
          }else{
            reduced[item.recommender]=(item.amount*0.7)*0.1;
          }
        });
        result.fourth.forEach((item,key)=>{
          if(reduced[item.recommender]){
            reduced[item.recommender]+=(item.amount*0.7)*0.6;
          }else{
            reduced[item.recommender]=(item.amount*0.7)*0.6;
          }
        });
        //Finally, update each user
        async.eachOf(reduced,(value,userId,cb)=>{
          uc.update({ _id : new ObjectId(userId)} , { $push : { balance : [value] }},{w:1},(err,updatedUser)=>{
            if(err){
              logger.err(`User missing balance ${userId} ${balance}`,err);
            }
            cb();
          });
        },(err)=>{
          //Now, we just have to find the payments again and repeat the operation
          pc.find({realized:true,distributed:false},{fields:{_id:1,user:1}}).toArray((err,remainingPayments)=>{
            if(err)return callback(err);
            distributePayments(remainingPayments,uc,pc,callback);
          });
        });
      });
    };

    Payment.native((err,paymentCol)=>{
      if(err){
        console.log('Iterative Payment Failed',err);
        throw err;
      }
      User.native((err,userCol)=>{
        if(err){
          console.log('Iterative Payment Failed',err);
          throw err;
        }
        paymentCol.find({realized:true,distributed:false},{fields:{_id:1,user:1}}).toArray((err,startPayments)=>{
          if(err){
            logger.err('Error finding payments on IterativePayment',err);
            return sails.lower(()=>{
              process.exit();
            });
          }
          distributePayments(startPayments,userCol,paymentCol,(err)=>{
            if(err)logger.err('Error finding payments on IterativePayment',err);
            sails.lower(()=>{
              process.exit();
            });
          });
        });
      });
    });
  });
})();
